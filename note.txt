## Contruction de l'image à l'aide de Packer
docker run -it --volume "/gcp-ws-openid/terraform":/terraform-code \
  --volume "/gcp-ws-openid/packer":/packer \
  --volume "/gcp-ws-openid/secrets":/secrets \
  --volume "/gcp-ws-openid/vars":/vars \
  --env TF_VAR_FILE=/vars/dev.tfvars \
  --env GOOGLE_PROJECT=rugged-shuttle-277619 \
  --env GOOGLE_APPLICATION_CREDENTIALS="/secrets/ws-openid.json" \
  --workdir /terraform-code/ \
  thegaragebandofit/infra-as-code-tools:gcl275-ter0.12.18-pac1.5.1
  
packer build -on-error=ask -var-file=ws-pedigree-dev-variables.json gcp_docker_debian_server.json

## Bastion
# LINUX
docker run -it --volume "/gcp-ws-openid/terraform":/terraform-code \
  --volume "/gcp-ws-openid/packer":/packer \
  --volume "/gcp-ws-openid/secrets":/secrets \
  --volume "/gcp-ws-openid/vars":/vars \
  --env TF_VAR_FILE=/vars/dev.tfvars \
  --env GOOGLE_PROJECT=rugged-shuttle-277619 \
  --env GOOGLE_APPLICATION_CREDENTIALS="/secrets/ws-openid.json" \
  --workdir /terraform-code/ \
  thegaragebandofit/infra-as-code-tools:latest

# WINDOWS terraform 0.12
cd C:\developpement\data\gcp-ws-openid
docker run -it --volume "%cd%/terraform":/terraform-code ^
  --volume "%cd%/packer":/packer ^
  --volume "%cd%/secrets":/secrets ^
  --volume "%cd%/vars":/vars ^
  --env TF_VAR_FILE=/vars/dev.tfvars ^
  --env GOOGLE_PROJECT=rugged-shuttle-277619 ^
  --env GOOGLE_APPLICATION_CREDENTIALS="/secrets/ws-openid.json" ^
  --workdir /terraform-code/ ^
  thegaragebandofit/infra-as-code-tools:latest

# WINDOWS terraform 0.13
cd C:\developpement\data\gcp-ws-openid
docker run -it --volume "%cd%/terraform":/terraform-code ^
  --volume "%cd%/packer":/packer ^
  --volume "%cd%/secrets":/secrets ^
  --volume "%cd%/vars":/vars ^
  --env TF_VAR_FILE=/vars/dev.tfvars ^
  --env GOOGLE_PROJECT=rugged-shuttle-277619 ^
  --env GOOGLE_APPLICATION_CREDENTIALS="/secrets/ws-openid.json" ^
  --workdir /terraform-code/ ^
  anthonydenecheau/infra-as-code-tools:latest

# terraform 0.13
https://www.scalefactory.com/blog/2020/06/25/what-we-are-looking-forward-to-in-terraform-0.13/

## Commande terraform
terraform force-unlock LOCK_ID 
terraform init --backend-config='/vars/backend-ws-pedigree-dev.hcl'
terraform plan --var-file='/vars/dev.tfvars'
terraform apply -auto-approve --var-file='/vars/dev.tfvars'
terraform destroy -auto-approve --var-file='/vars/dev.tfvars'
    
gcloud auth activate-service-account --project=rugged-shuttle-277619 --key-file=/secrets/ws-openid.json
gcloud compute project-info describe --project rugged-shuttle-277619
gcloud services list --available

gcloud services enable cloudresourcemanager.googleapis.com
gcloud services enable cloudbilling.googleapis.com
gcloud services enable container.googleapis.com
gcloud services enable containerregistry.googleapis.com
gcloud services enable iam.googleapis.com
gcloud services enable compute.googleapis.com

gcloud services enable serviceusage.googleapis.com
gcloud services enable servicenetworking.googleapis.com
gcloud services enable secretmanager.googleapis.com
gcloud services enable "?API Serverless VPC Access 

gcloud services enable logging.googleapis.com

gcloud services enable sqladmin.googleapis.com

gcloud services enable storage-component.googleapis.com

gcloud services enable run.googleapis.com
gcloud services enable runtimeconfig.googleapis.com

## SSL
# https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs
gcloud compute ssl-certificates list \
        --global
gcloud compute ssl-certificates describe scc-docker-server-ssl-certificate \
        --global \
        --format="get(name,managed.status, managed.domainStatus)"

Attendre max 30min pour que le LoadBalancer puisse l'utiliser ...
curl -I https://open-id.elhadir.com

##Cloud VPC connector
https://cloud.google.com/vpc/docs/configure-serverless-vpc-access#creating_a_connector

## Cloud SQL
# https://www.terraform.io/docs/providers/google/r/sql_database_instance.html

## SQL proxy
cd C:\developpement\app\Google
gcloud auth activate-service-account --project=rugged-shuttle-277619 --key-file=/secrets/ws-openid.json
gcloud config set project rugged-shuttle-277619
cloud_sql_proxy_x64.exe -instances=<INSTANCE_CONNECTION_NAME>=tcp:5432

v## Cloud Secret
# https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-secrets-credentials?hl=fr
Dans le tableau des autorisations, recherchez l'e-mail se terminant par @cloudbuild.gserviceaccount.com, puis cliquez sur l'icône en forme de crayon.
Ajoutez un rôle Secret Manager Secret Accessor

#ano date
docker-machine restart
  
## keycloak
# https://github.com/keycloak/keycloak-containers/blob/10.0.1/server/README.md

# -e JDBC_PARAMS="ssl=false" \

curl -X POST https://open-id.elhadir.com//auth/realms/ws/protocol/openid-connect/token --user ws-pedigree-app:77e59ead-0dde-4691-a577-24e66d74f5f4 -H "content-type: application/x-www-form-urlencoded" -d "username=loe&password=loe&grant_type=password"

# connexion POSTGRES
https://github.com/keycloak/keycloak-containers/blob/master/server/tools/cli/databases/postgres/change-database.cli

# volume
https://stackoverflow.com/questions/57756835/docker-toolbox-volume-mounting-not-working-on-windows-10  
docker-machine ssh default

# cloud run
https://www.terraform.io/docs/providers/google/r/cloud_run_service.html
https://github.com/jtama-op/quarkus/tree/18280ee018d82acef601fc022a5c6923bfb7a451/extensions/agroal
https://github.com/jtama-op/quarkus/commit/eb27113c050b2c98a0ef046a84d366484adf6e21#diff-98aae1b619d01efcac77e30c84d4ab31
https://qiita.com/koduki/items/fa60e87e1d8bb28c2be4
https://medium.com/swlh/preparing-your-django-application-for-google-cloud-run-7c8cb7b7464b


C:\developpement\data\cloud-run-hello

# cloud build
https://cloud.google.com/cloud-build/docs/build-config?hl=fr
https://cloud.google.com/cloud-build/docs/automating-builds/run-builds-on-github?hl=fr
https://cloud.google.com/cloud-build/docs/deploying-builds/deploy-cloud-run?hl=fr
https://github.com/gruntwork-io/terraform-google-ci/blob/master/examples/cloud-build-github-gke/main.tf

https://cloud.google.com/solutions/managing-infrastructure-as-code?hl=fr

Optimisation compilation
https://cloud.google.com/java/getting-started/jib?hl=fr

Ci/cd
https://cloud.google.com/run/docs/continuous-deployment-with-cloud-build?hl=fr
https://medium.com/serverlessguru/serverless-ci-cd-cloud-build-e8c09e9a1018
https://medium.com/@alexismp/deploying-a-quarkus-app-to-google-cloud-run-c4a8ca3be526
https://medium.com/google-cloud/simplifying-continuous-deployment-to-cloud-run-with-cloud-build-including-custom-domain-setup-ssl-22d23bed5cd6

# cloud registry
https://github.com/gruntwork-io/terraform-google-ci/tree/master/modules/gcr-registry

terraform import --var-file='/vars/dev.tfvars' -provider=google-beta google_cloudbuild_trigger.default projects/rugged-shuttle-277619/triggers/DeploiementCloudRun 

# https://phpnews.io/feeditem/google-cloud-build-google-cloud-run-fixing-error-gcloud-run-deploy-permission-denied-the-caller-does-not-have-permission
# Grant the Cloud Run Admin role to the Cloud Build service account
gcloud projects add-iam-policy-binding rugged-shuttle-277619 \
  --member "serviceAccount:895901133514@cloudbuild.gserviceaccount.com" \
  --role roles/run.admin

# Grant the IAM Service Account User role to the Cloud Build service account on the Cloud Run runtime service account
gcloud iam service-accounts add-iam-policy-binding \
  895901133514-compute@developer.gserviceaccount.com \
  --member="serviceAccount:895901133514@cloudbuild.gserviceaccount.com" \
  --role="roles/iam.serviceAccountUser"

# OVH
Domaine a rediriger :
open-id.elhadir.com
www.open-id.elhadir.com
Adresse de destination :
34.107.200.160

#keycloak
export access_token=$(\
    curl -X POST https://open-id.elhadir.com/auth/realms/quarkus/protocol/openid-connect/token \
    --user backend-service:secret \
    -H 'content-type: application/x-www-form-urlencoded' \
    -d 'username=alice&password=alice&grant_type=password' | jq --raw-output '.access_token' \
 )

 curl -v -X GET \
  https://ws-pedigree-service-uujqss2rqq-ew.a.run.app/api/users/me \
  -H "Authorization: Bearer "$access_token

curl -v -X GET \
  https://ws-pedigree-service-uujqss2rqq-ew.a.run.app/api/public/fruits/1 \
  -H "Authorization: Bearer "$access_token


# Ano Destroy
Error: Error, failed to deleteuser openid-user in instance openid-db-5937fb20:
Error: Error reading Database: googleapi: Error 400: Invalid request: failed to delete database "openid-user". Detail: pq: database "openid-user" is being accessed by other users. (Please use psql client to delete database that is not owned by "cloudsqlsuperuser")
., invalid

> Solution
terraform state rm 'module.postgres_db_user_openid'

> Solution
terraform state rm 'module.scc-api'
